{
    "q-docker-hub-image": {
      "answer": "https://hub.docker.com/repository/docker/narayanareddy123/getting-started-todo-app/general",
      "question": "Create and push an image to Docker Hub . Add a tag named miryala.narayanareddy to the image. What is the Docker image URL? It should look like: https://hub.docker.com/repository/docker/$USER/$REPO/general"
    },
    "q-fastapi": {
      "answer": "http://127.0.0.1:8080/api",
      "question": "Download q-fastapi .csv . This file has 2-columns: studentId: A unique identifier for each student, e.g. 1, 2, 3, ... class: The class (including section) of the student, e.g. 1A, 1B, ... 12A, 12B, ... 12Z Write a FastAPI server that serves this data. For example, /api should return all students data (in the same row and column order as the CSV file) as a JSON like this: { \"students\" : [ { \"studentId\" : 1 , \"class\" : \"1A\" } , { \"studentId\" : 2 , \"class\" : \"1B\" } , ... ] } If the URL has a query parameter class , it should return only students in those classes. For example, /api?class=1A should return only students in class 1A. /api?class=1A&class=1B should return only students in class 1A and 1B. There may be any number of classes specified. Return students in the same order as they appear in the CSV file (not the order of the classes). Make sure you enable CORS to allow GET requests from any origin. What is the API URL endpoint for FastAPI? It might look like: http://127.0.0.1:8000/api"
    },
    "q-github-action": {
      "answer": "https://github.com/mnarayanar/tds-a2",
      "question": "Create a GitHub action on one of your GitHub repositories. Make sure one of the steps in the action has a name that contains your email address miryala.narayanareddy@straive.com . For example: jobs: test: steps: - name: miryala.narayanareddy@straive.com run: echo \"Hello, world!\" Trigger the action and make sure it is the most recent action . What is your repository URL? It will look like: https://github.com/USER/REPO"
    },
    "q-github-pages": {
      "answer": "https://mnarayanar.github.io/tds-a1/",
      "question": "Publish a page using GitHub Pages that showcases your work. Ensure that your email address miryala.narayanareddy@straive.com is in the page's HTML. GitHub pages are served via CloudFlare which obfuscates emails . So, wrap your email address inside a: <!--email_off--> miryala.narayanareddy@straive.com <!--/email_off--> What is the GitHub Pages URL? It might look like: https://[USER].github.io/[REPO]/"
    },
    "q-image-compression": {
      "answer": {},
      "question": "Download the image below and compress it losslessly to an image that is less than 1,500 bytes. By losslessly, we mean that every pixel in the new image should be identical to the original image. Upload your losslessly compressed image (less than 1,500 bytes)"
    },
    "q-llamafile": {
      "answer": "https://110f-2406-b400-b4-5603-55b1-d68d-6517-fab0.ngrok-free.app/",
      "question": "Download Llamafile . Run the Llama-3.2-1B-Instruct.Q6_K.llamafile model with it. Create a tunnel to the Llamafile server using ngrok . What is the ngrok URL? It might look like: https://[random].ngrok-free.app/"
    },
    "q-markdown": {
      "answer": "# Analysis of Number of Steps walked\n\n## Description\n\n**Introduction**: \n\nThis is an analysis of the number of steps you walked each day for a week, comparing over time and with friends. \n\n***code:*** \n\nin a single line `sum(steps)`\n\nTo calculate sum\n\n```\nsum = 0\nfor x in steps:\n    sum+=x\nprint(sum)\n\n```\n\n## steps \n\n\n1. Collect some friends and ask them to do the following\n    - note down steps walked everyday\n    - list them in an array after a week\n2. after the end of the week get all the data \n    - calculate sum \n    - do analysis\n    \n\n## collected Data\n\n| Name | Total no of steps |\n|------|-------------------|\n| ravi | 12023             |\n|charan| 20039|\n|rahul| 30443|\n|govind| 43531|\n\n## Analysis\n\n\nlink to anaysis website is [here](https://mystepsanalysis.com)\nimage of line chart\n![Line chart](\"https://mystepsanalysis.com/images/line-chart.jpg\")\n\n\n> Walking everyday is good for health\n\n\n",
      "question": "Write documentation in Markdown for an **imaginary** analysis of the number of steps you walked each day for a week, comparing over time and with friends. The Markdown must include: Top-Level Heading : At least 1 heading at level 1, e.g., # Introduction Subheadings : At least 1 heading at level 2, e.g., ## Methodology Bold Text : At least 1 instance of bold text, e.g., **important** Italic Text : At least 1 instance of italic text, e.g., *note* Inline Code : At least 1 instance of inline code, e.g., sample_code Code Block : At least 1 instance of a fenced code block , e.g. print ( \"Hello World\" ) Bulleted List : At least 1 instance of a bulleted list, e.g., - Item Numbered List : At least 1 instance of a numbered list, e.g., 1. Step One Table : At least 1 instance of a table, e.g., | Column A | Column B | Hyperlink : At least 1 instance of a hyperlink, e.g., [Text](https://example.com) Image : At least 1 instance of an image, e.g., ![Alt Text](https://example.com/image.jpg) Blockquote : At least 1 instance of a blockquote, e.g., > This is a quote Enter your Markdown here:"
    },
    "q-use-colab": {
      "answer": "86533",
      "question": "Let's make sure you can access Google Colab. Run this program on Google Colab, allowing all required access to your email ID: miryala.narayanareddy@straive.com . import hashlib import requests from google.colab import auth from oauth2client.client import GoogleCredentials auth.authenticate_user() creds = GoogleCredentials.get_application_default() token = creds.get_access_token().access_token response = requests.get( \"https://www.googleapis.com/oauth2/v1/userinfo\" , params={ \"alt\" : \"json\" }, headers={ \"Authorization\" : f\"Bearer {token} \" } ) email = response.json()[ \"email\" ] hashlib.sha256( f\" {email} {creds.token_expiry.year} \" .encode()).hexdigest()[- 5 :] What is the result? (It should be a 5-character string)"
    },
    "q-use-colab-image-library": {
      "answer": "250135",
      "question": "Download this image . Create a new Google Colab notebook and run this code (after fixing a mistake in it) to calculate the number of pixels with a certain minimum brightness: import numpy as np from PIL import Image from google.colab import files import colorsys # There is a mistake in the line below. Fix it image = Image. open ( list (files.upload().keys)[ 0 ]) rgb = np.array(image) / 255.0 lightness = np.apply_along_axis( lambda x: colorsys.rgb_to_hls(*x)[ 1 ], 2 , rgb) light_pixels = np. sum (lightness > 0.217 ) print ( f'Number of pixels with lightness > 0.217: {light_pixels} ' ) What is the result? (It should be a number)"
    },
    "q-vercel-python": {
      "answer": "https://vercel-deploy-mauve-one.vercel.app/api",
      "question": "Download this q-vercel-python .json which has the marks of 100 imaginary students. Create and deploy a Python app to Vercel . Expose an API so that when a request like https://your-app.vercel.app/api?name=X&name=Y is made, it returns a JSON response with the marks of the names X and Y in the same order, like this: { \"marks\" : [ 10 , 20 ] } Make sure you enable CORS to allow GET requests from any origin. What is the Vercel URL? It should look like: https://your-app.vercel.app/api"
    }
  }